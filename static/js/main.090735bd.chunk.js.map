{"version":3,"sources":["Edit-form/edit-form.js","To-do-item/to-do-item.js","Add-item/add-item.js","To-do-list/to-do-list.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","fabIcon","margin","width","height","color","backgroundColor","EditForm","props","classes","className","onSubmit","handleEditDone","TextField","name","label","defaultValue","initialText","Fab","aria-label","type","ToDoItem","checkBoxChange","e","url","state","id","newVal","target","checked","axios","put","completed","then","response","setState","completedItem","editItem","prevState","isEditing","editDone","preventDefault","newData","updatedItem","value","title","text","this","Checkbox","checkBox","onChange","style","textDecoration","onClick","handleDelete","Divider","React","Component","withStyles","flex","card","padding","display","justifyContent","AddItem","Card","handleNewItem","ToDoList","deleteItem","delete","arr","todoList","filter","item","addNewItem","newToDo","userId","newItem","post","console","log","get","res","data","map","key","flexDirection","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.090735bd.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './edit-form.css';\n\nconst useStyles = makeStyles({\n  fabIcon: {\n    margin: '25px 0 25px 40px',\n    width: '40px',\n    height: '40px',\n    color: '#ffffff',\n    backgroundColor: 'green'\n  },\n});\n\nexport default function EditForm(props) {\n  const classes = useStyles();\n\n  return (\n    <div className=\"edit-form-container\">\n      <form onSubmit={props.handleEditDone}>\n        <TextField\n          name=\"updatedItem\"\n          label=\"Update item\"\n          defaultValue={props.initialText}\n          margin=\"normal\"\n        />\n\n        <Fab\n          aria-label=\"Add\"\n          className={classes.fabIcon}\n          type='submit'\n        >\n          <DoneIcon/>\n        </Fab>\n\n      </form>\n    </div>\n  )\n\n}\n\n","import React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport './to-do-item.css';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport EditForm from '../Edit-form/edit-form';\nimport axios from 'axios';\n\nconst useStyles = theme => ({\n  checkBox: {\n    flex: 3,\n  }\n});\n\nclass ToDoItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      completedItem: this.props.completed,\n      text: this.props.text,\n      id: this.props.id,\n    };\n  }\n\n  checkBoxChange = (e) => {\n    const url = 'https://jsonplaceholder.typicode.com/todos/' + this.state.id;\n    let newVal = e.target.checked;\n    axios.put(url, { completed: e.target.checked }).then( (response) => {\n      this.setState({\n        completedItem: newVal,\n      });\n    });\n  };\n\n  editItem = (e) => {\n    this.setState((prevState) => ({\n      isEditing: !prevState.isEditing,\n    }));\n  };\n\n  editDone = (e) => {\n    e.preventDefault();\n    const newData = e.target.updatedItem.value;\n    const url = 'https://jsonplaceholder.typicode.com/todos/' + this.state.id;\n    axios.put(url, { title: newData }).then( (response) => {\n      this.setState({\n        isEditing: false,\n        text: newData,\n      });\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className=\"to-do-item-container\">\n        <div className=\"to-do-item\">\n          <Checkbox\n            className={classes.checkBox}\n            color=\"primary\"\n            checked={this.state.completedItem}\n            onChange={this.checkBoxChange}\n          />\n\n          <p\n            className=\"to-do-item-text\"\n            style={{ textDecoration : this.state.completedItem ? 'line-through' : null }}>\n            {this.state.text}\n          </p>\n\n          <div className=\"edit-button-container\" onClick={this.editItem}>\n            <EditIcon/>\n          </div>\n\n          <div className=\"delete-button-container\" onClick={() => this.props.handleDelete(this.state.id)}>\n            <DeleteIcon/>\n          </div>\n        </div>\n\n        {\n          this.state.isEditing ?\n            <EditForm\n              handleEditDone={this.editDone}\n              initialText={this.state.text}\n            />\n            :\n            null\n        }\n\n        <Divider/>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles())(ToDoItem);\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n card: {\n   width: '500px',\n   padding: '16px',\n   margin: '20px 0',\n   display: 'flex',\n   justifyContent: 'center',\n },\n fabIcon: {\n   margin: '25px 0 25px 40px',\n   width: '40px',\n   height: '40px',\n   color: '#ffffff',\n },\n});\n\nexport default function AddItem(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <form onSubmit={props.handleNewItem}>\n        <TextField\n          name=\"newItem\"\n          label=\"Add new item\"\n          margin=\"normal\"\n        />\n        <Fab\n          color=\"primary\"\n          aria-label=\"Add\"\n          className={classes.fabIcon}\n          type='submit'>\n          <AddIcon/>\n        </Fab>\n      </form>\n    </Card>\n  );\n}\n","import React from 'react';\nimport ToDoItem from '../To-do-item/to-do-item';\nimport Card from '@material-ui/core/Card';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport axios from 'axios';\nimport AddItem from \"../Add-item/add-item\";\n\nconst useStyles = theme => ({\n  card: {\n    width: '500px',\n    padding: '0px 16px',\n    margin: '20px 0',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n  },\n});\n\nclass ToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todoList: [],\n      id: 201,\n    }\n  }\n\n  componentDidMount() {\n    console.log('initial get');\n    axios.get('https://jsonplaceholder.typicode.com/todos')\n      .then((res) => {\n        this.setState({\n          todoList: res.data,\n        })\n      });\n  }\n\n  deleteItem = (e) => {\n    const url = 'https://jsonplaceholder.typicode.com/todos/' + e;\n    axios.delete(url).then((response) => {\n      const arr = this.state.todoList.filter((item) => {\n        return item.id !== e;\n      });\n      this.setState({\n        todoList: arr,\n      });\n    });\n  };\n\n  addNewItem = (e) => {\n    e.preventDefault();\n    const url = 'https://jsonplaceholder.typicode.com/todos';\n    const newData = e.target.newItem.value;\n    const newToDo = {\n      userId: 1,\n      title: newData,\n      completed: false,\n      id: this.state.id,\n    };\n    e.target.newItem.value = '';\n    axios.post(url, newToDo).then((response) => {\n      this.setState((prevState) => ({\n        todoList: [newToDo, ...prevState.todoList],\n        id: prevState.id + 1,\n      }));\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <AddItem handleNewItem={this.addNewItem}/>\n        <Card className={classes.card}>\n          {\n            this.state.todoList.map((item) => (\n              <ToDoItem\n                text={item.title}\n                key={item.id}\n                id={item.id}\n                completed={item.completed}\n                handleDelete={this.deleteItem}\n              />\n            ))\n          }\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles())(ToDoList);\n","import React from 'react';\nimport './App.css';\nimport ToDoList from \"./To-do-list/to-do-list\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1 className=\"app-heading\">\n        To-Do App\n      </h1>\n      <ToDoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}